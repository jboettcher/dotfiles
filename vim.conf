set nocompatible              " be iMproved, required
filetype off                  " required

colorscheme monokai

call plug#begin('~/.vim/plugged')
Plug 'VundleVim/Vundle.vim'
Plug 'scrooloose/nerdtree'
Plug 'vim-syntastic/syntastic'
Plug 'airblade/vim-gitgutter'
Plug 'rhysd/vim-clang-format'
Plug 'derekwyatt/vim-fswitch'
Plug 'Raimondi/delimitMate'
Plug 'easymotion/vim-easymotion'
Plug 'ntpeters/vim-better-whitespace'
Plug 'jalvesaq/Nvim-R'

Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'autozimu/LanguageClient-neovim', {
    \ 'commit': '0e5c9546bfddbaa2b01e5056389c25aefc8bf989',
    \ 'do': 'bash install.sh',
    \ }

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'tmux-plugins/vim-tmux-focus-events'   " tmux focus events
Plug 'roxma/vim-tmux-clipboard'             " tmux clipboard
Plug 'tpope/vim-fugitive' " git plugin

Plug 'haya14busa/vim-poweryank'


" Initialize plugin system
call plug#end()


filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" VIM Configuration File
" Description: Optimized for C/C++ development, but useful also for other things.
"

let mapleader = ","
let g:mapleader = ","
let maplocalleader = "-"

inoremap jk <Esc>



" s{char}{char} to move to {char}{char} easymotion
nmap s <Plug>(easymotion-overwin-f2)


set noswapfile

" delete old insert text
set backspace=2

" set UTF-8 encoding
set enc=utf-8
set fenc=utf-8
set termencoding=utf-8
" disable vi compatibility (emulation of old bugs)
set nocompatible
" use indentation of previous line
set autoindent
" use intelligent indentation for C
set smartindent
set incsearch
set nosmartcase
set ignorecase

" configure tabwidth and insert spaces instead of tabs
set tabstop=3        " tab width is 2 spaces
set shiftwidth=3     " indent also with 2 spaces
set expandtab        " expand tabs to spaces

" wrap lines at 120 chars. 80 is somewaht antiquated with nowadays displays.
set textwidth=120
" turn syntax highlighting on
set t_Co=256
if &term =~ '256color'
  " disable Background Color Erase (BCE) so that color schemes
  " render properly when inside 256-color tmux and GNU screen.
  set t_ut=
endif

syntax on
" colorscheme wombat256
" turn line numbers on
set number
" highlight matching braces
set showmatch
" intelligent comments
set comments=sl:/*,mb:\ *,elx:\ */

set cinoptions=l1
set cinoptions=L0
set cino=l1




" Enhanced keyboard mappings
nmap tc :tabnew<CR>
nmap tp :tabprev<CR>
nmap tn :tabnext<CR>


"
map <C-n> :NERDTreeToggle<CR>
" switch between header/source with F3
map <F3> :FSHere<CR>
"specify where to search for include files
"Switch to the file and load it into a new window split on the right, and set original window active again
nmap <silent> <F4> :FSSplitRight<cr>:wincmd h<CR>
imap <F3> <C-\><C-O>:FSHere<CR>

let tableau=$USER=='jboettcher'||$USER=='jbottcher'

" Clang-Format
if tableau
  " use Tableau's clang-format config
  let g:clang_library_path='/usr/lib/llvm-9/lib'
  " make sure that clang-format is in path! e.g., /usr/local/bin/clang-format
  let g:clang_format#command='clang-format-9'
  au! BufEnter *.hpp let b:fswitchdst = 'cpp,c' | let b:fswitchlocs = 'reg:|hyper/include/hyper/|hyper/,reg:/include/src/,.'
  au! BufEnter *.cpp let b:fswitchdst = 'hpp,h' | let b:fswitchlocs = 'reg:|.*/hyper/|hyper/include/hyper/,reg:/src/include,.'
else
  let g:clang_library_path='/usr/lib/llvm-13/lib'
  let g:clang_format#command='clang-format'
  au! BufEnter *.hpp let b:fswitchdst = 'cpp,c' | let b:fswitchlocs = '.,../,../src,reg:/include/src/,reg:/hyper.include//'
  au! BufEnter *.cpp let b:fswitchdst = 'hpp,h' | let b:fswitchlocs = '.,include,../include,reg:/src/include/,reg:/src/include*/,reg:|hyper|hyper/include/,reg:|/hyper/|/hyper/include/hyper/|~'
endif

let g:clang_format#detect_style_file=1
let g:clang_format#auto_format_on_insert_leave=0
let g:clang_format#auto_format=0

nmap <F6> :ClangFormat<CR>:w<CR>


let g:strip_whitespace_confirm=0
let g:strip_whitespace_on_save = 1


set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.o,*.d,*.dwo,*.make,*.a,link.txt,depend.internal,CXX.includecache,*.cmake,CMakeCache.txt

set statusline =
" Buffer number
set statusline +=[%n]
" File description
set statusline +=%f\ %h%m%r%w
" Filetype
set statusline +=%y
" Date of the last time the file was saved
set statusline +=\ %{strftime(\"[%d/%m/%y\ %T]\",getftime(expand(\"%:p\")))}
" Total number of lines in the file
set statusline +=%=%-10L
" Line, column and percentage
set statusline +=%=%-14.(%l,%c%V%)\ %P

" use <tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()

" use <c-space>for trigger completion
inoremap <silent><expr> <c-space> coc#refresh()

" Use <Tab> and <S-Tab> to navigate the completion list:
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Use cr to confirm completion
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" To make <cr> select the first completion item and confirm the completion when no item has been selected:
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>"


let g:LanguageClient_serverCommands = {
    \   'cpp': ['~/.local/bin/ccls'],
    \   'c': ['~/.local/bin/ccls'],
    \ }

let g:LanguageClient_autoStart = 1
nnoremap <leader>gt :call LanguageClient#textDocument_definition()<CR>
noremap <leader>gr :call LanguageClient#textDocument_references()<CR>
nnoremap <leader>gs :call LanguageClient#textDocument_documentSymbol()<CR>
nnoremap <leader>gh :call LanguageClient#findLocations({'method':'$ccls/inheritance','flat':v:true,'level':3,'derived':v:true})<cr>
nnoremap <leader>gf :call LanguageClient#textDocument_formatting()<CR>
nnoremap <F5> :call LanguageClient#textDocument_rename()<CR>


" Remap keys for gotos
nmap <silent> <leader>rd <Plug>(coc-type-definition)
nmap <silent> <leader>rj <Plug>(coc-definition)
nmap <silent> <leader>ri <Plug>(coc-implementation)
nmap <silent> <leader>rf <Plug>(coc-references)
nmap <leader>rw <Plug>(coc-rename)
" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300
" Better display for messages
set cmdheight=2
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
set signcolumn=yes


" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Search workspace symbols
nnoremap <silent> <C-S>  :<C-u>CocList -I symbols<cr>

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')


" Remap for do codeAction of current line
nmap <F8>  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <F9>  <Plug>(coc-fix-current)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction


" Location list
nnoremap <leader>ln :lne<CR>
nnoremap <leader>lp :lp<CR>
nnoremap <leader>lc :lcl<CR>

" FZF ctrl-p mode
nnoremap <C-P> :Files<CR>

" find all occurences of current word and open them in quickfix list
map <F10> :execute "vimgrep /" . expand("<cword>") . "/j **" <Bar> cw<CR>

nnoremap [q :cprev<CR>
nnoremap ]q :cnext<CR>

" Spellchecking
"autocmd BufEnter *.tex setlocal spell spelllang=de
autocmd BufEnter *.tex setlocal spell spelllang=en_us
autocmd BufEnter *.txt setlocal spell spelllang=en_us
nnoremap <F5> :setlocal spell! spelllang=en_us<CR>
nnoremap <Ctrl><F5> :setlocal spell! spelllang=de<CR>

" Unused parameter
nnoremap <Leader>* ciw/**/<Esc>hhp

map <Leader>y <Plug>(operator-poweryank-osc52)
